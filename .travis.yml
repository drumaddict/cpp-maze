# Linux Build Configuration for Travis
sudo: required # Use Travis docker infrastructure
dist: trusty
language: cpp
os:
  - linux
compiler:
  - clang
env:
  global:
    - secure: "kuCyatatsoOwecL0xJJJ6fq03z28HzMJrR7BKHCt6kfdvytEOs/UrmpS+uVtoSlTv5b/wqip9k9Zy7RF5EYhQOHeb5bwEjnamNRn5cTnujbFMYyIvwM3qOtcmG0QPdaOKCD0obmxeB+yjiL+SSxZ+0n392Qrj60YUzSIeIOhecaajydjSDV2l0ObJ6MG1+dw47NeSu+jiWVmMeuZhPAlUGRrQq986qbpCNWi/5qoOXHtJCxS97pg4qS5xbhXJ9GuouKvoxBlYeF5Mux3/AtzGHZ1r6Ru1EqMuFsrRLdaPamTDnCThaNihGFTo86Arm2+vXbKF/Kctcj5aH2PwKUV0b1zYao1+WDtKn0eVaUJ9Wn1zE2zoQ/7S781uRp0Hfatf2qqTrZdGSQSWEb5/oAuvm0BCQmloEJzG93iLNKC6la1rB9p1DtjeO9qRiLWyc9nt0zaLhdBFIPfRKEF12u32dqNQnP0mMzufkvvJ8iR8XxQgIR4jqSeMkZNqxKjEb3Pxp9/EkwtIWzvFcMigPkEylTuHTQw1IGMB9Qryn3E6cHjJ8LtazbKAT5aXJllBvPtEdYaIyRP5F7QiC0apr5o/pmZ9jVwq6OleOx7ui7uxTxRteaOCNiIi3MFvyv3Yx/F6NX44Db/BfeHQqy2v7Pyp78eMAMRhGLQl1pGWADbBCQ="
  matrix:
    # - CMAKE_CONFIGURATION=release BUILD_DIR=build
    - CMAKE_CONFIGURATION=debug BUILD_DIR=build-debug
    # # Each line is a set of environment variables set before a build.
    # # Thus each line represents a different build configuration.
    # - SHADERC_BUILD_TYPE=Release SHADERC_CODE_COVERAGE=OFF
    # - SHADERC_BUILD_TYPE=Debug SHADERC_CODE_COVERAGE=OFF
    # - SHADERC_BUILD_TYPE=Debug SHADERC_CODE_COVERAGE=ON
  # - gcc
cache:
  apt: true
# safelist
branches:
  only:
    - master
    - coverity_scan
addons:
  apt:
    # Travis white list of ppa.
    # https://github.com/travis-ci/apt-source-whitelist/blob/master/ubuntu.json
    sources:
      - ubuntu-toolchain-r-test     # For gcc 4.9
      # - kubuntu-backports           # For cmake 2.8.12
      - llvm-toolchain-precise-3.8  # For clang 3.6
    # Travis whitelist of packages.
    # https://github.com/travis-ci/apt-package-whitelist/blob/master/ubuntu-precise
    packages:
      - g++-6
      - clang-3.8
      # - ninja-build
      # - lcov
      #
      #
  coverity_scan:
    project:
      name: "drumaddict/cpp-maze"
      description: "Build submitted via Travis CI"
    notification_email: kabasakalis@gmail.com
    build_command_prepend: "cd ."
    build_command:   cmake --build $BUILD_DIR
    branch_pattern: coverity_scan

before_install:
  # C++14
  - sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
  - sudo apt-get update -qq
install:
  # - pip install --user nose
  # - pip install --user cpp-coveralls
  # - export PATH=$HOME/.local/bin:$PATH # Make sure we can find the above Python packages
  # - if [ "$CC" = "gcc"   ]; then export CC=gcc-4.9 CXX=g++-4.9; fi       # Make sure that gcc-4.9 is selected.
  - if [ $TRAVIS_OS_NAME == linux ]; then sudo apt-get install -qq cmake  libboost-all-dev libsfml-dev  cppcheck clang-tidy-3.8; fi
  - if [ $TRAVIS_OS_NAME == osx ]; then brew update && brew install  cppcheck; fi
  - if [ "$CC" = "clang" ]; then export CC=clang-3.8 CXX=clang++-3.8; fi # Make sure that clang-3.8 is selected.

before_script:
  - ./configure
  - if [ $CMAKE_CONFIGURATION == release ]; then ./configure; fi
  - if [ $CMAKE_CONFIGURATION == debug ]; then ./configure debug; fi
script:
  - if [[ "${COVERITY_SCAN_BRANCH}" == 1 ]];
      then
        echo "Don't build on coverty_scan branch.";
        exit 0;
    fi
  - cmake --build $BUILD_DIR
  - cmake --build $BUILD_DIR --target test
  # - cmake --build $BUILD_DIR --target check-all
# after_success:
#   # Collect coverage and push to coveralls.info.
#   # Ignore third party source code and tests.
#   - if [ "$CC" = "gcc-4.9" -a "$SHADERC_CODE_COVERAGE" = "ON" ]; then
#       coveralls
#         --root ../
#         --build-root ./
#         --exclude-pattern '.+/third_party/'
#         --exclude-pattern '.+/.+_test\.cc'
#         --exclude-pattern '.+/CMakeFiles/'
#         --gcov /usr/bin/gcov-4.9
#         --gcov-options '\--long-file-names --preserve-paths'
#         --verbose;
#     fi
# notifications:
#   email:
#     recipients:
#       - kabasakalis@gmail.com
#     on_success: change
#     on_failure: always
